// <auto-generated />
using System;
using ECommerceNulTien;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceNulTien.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20221127193250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("ECommerceNulTien.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 12345,
                            FirstName = "Slobodanka",
                            LastName = "Tesmanovic",
                            Password = "",
                            PhoneNumber = "0656011065",
                            Username = "tesmanov"
                        },
                        new
                        {
                            Id = 123456,
                            FirstName = "UserTest",
                            LastName = "UserTest",
                            Password = "",
                            PhoneNumber = "0660237482",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("ECommerceNulTien.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ECommerceNulTien.Model.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("ECommerceNulTien.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("ECommerceNulTien.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11110,
                            Price = 700.0,
                            ProductName = "product1",
                            Quantity = 100
                        },
                        new
                        {
                            Id = 11111,
                            Price = 100.0,
                            ProductName = "product2",
                            Quantity = 5
                        },
                        new
                        {
                            Id = 11112,
                            Price = 1700.0,
                            ProductName = "product3",
                            Quantity = 10
                        },
                        new
                        {
                            Id = 11113,
                            Price = 4000.0,
                            ProductName = "product4",
                            Quantity = 25
                        });
                });

            modelBuilder.Entity("ECommerceNulTien.Model.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCart", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11111,
                            CustomerId = 12345,
                            ModificationDate = new DateTime(2022, 11, 27, 20, 32, 50, 553, DateTimeKind.Local).AddTicks(6543),
                            Total = 0.0
                        },
                        new
                        {
                            Id = 11112,
                            CustomerId = 123456,
                            ModificationDate = new DateTime(2022, 11, 27, 20, 32, 50, 553, DateTimeKind.Local).AddTicks(6587),
                            Total = 0.0
                        });
                });

            modelBuilder.Entity("ECommerceNulTien.Model.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11111,
                            ProductId = 11111,
                            Quantity = 5,
                            ShoppingCartId = 11112
                        });
                });

            modelBuilder.Entity("ECommerceNulTien.Model.Order", b =>
                {
                    b.HasOne("ECommerceNulTien.Model.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceNulTien.Model.OrderDetails", b =>
                {
                    b.HasOne("ECommerceNulTien.Model.Order", null)
                        .WithOne("OrderDetails")
                        .HasForeignKey("ECommerceNulTien.Model.OrderDetails", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceNulTien.Model.OrderItem", b =>
                {
                    b.HasOne("ECommerceNulTien.Model.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("ECommerceNulTien.Model.ShoppingCart", b =>
                {
                    b.HasOne("ECommerceNulTien.Model.Customer", null)
                        .WithOne("ShoppingCart")
                        .HasForeignKey("ECommerceNulTien.Model.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceNulTien.Model.ShoppingCartItem", b =>
                {
                    b.HasOne("ECommerceNulTien.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceNulTien.Model.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceNulTien.Model.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("ECommerceNulTien.Model.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ECommerceNulTien.Model.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
